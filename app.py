import os
import tempfile
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from fpdf import FPDF

st.set_page_config(page_title="CFO Agent Dashboard", layout="wide")
st.title("ðŸ¤– CFO Agent Dashboard")

st.write(
    "Upload a **CSV** or **Excel (.xlsx/.xls)** with two columns: "
    "a date/period column and a numeric amount column."
)

# ---- File upload (CSV + Excel) ----
uploaded = st.file_uploader("ðŸ“¥ Upload file", type=["csv", "xlsx", "xls"])

def load_df(file) -> pd.DataFrame:
    """Load CSV or Excel into a DataFrame."""
    if file is None:
        return None
    name = file.name.lower()
    if name.endswith(".csv"):
        return pd.read_csv(file)
    elif name.endswith(".xlsx") or name.endswith(".xls"):
        return pd.read_excel(file, engine="openpyxl")
    else:
        raise ValueError("Unsupported file type. Please upload CSV or Excel (.xlsx/.xls).")

def coerce_numeric(series: pd.Series) -> pd.Series:
    """Try to convert a series to numeric, keep NaN if not possible."""
    return pd.to_numeric(series, errors="coerce")

if uploaded:
    # Load
    try:
        df = load_df(uploaded)
    except Exception as e:
        st.error(f"Could not read the file: {e}")
        st.stop()

    # Basic cleaning
    df = df.dropna(how="all")
    if df.shape[1] < 2:
        st.error("File must have at least two columns.")
        st.stop()

    # Column roles
    period_col = df.columns[0]
    value_col = df.columns[1]

    # Coerce numeric values
    vals = coerce_numeric(df[value_col])
    if vals.isna().all():
        st.error(f"Second column (â€˜{value_col}â€™) must contain numbers.")
        st.stop()

    # Parse first column as dates if possible
    try:
        df[period_col] = pd.to_datetime(df[period_col], errors="ignore")
    except Exception:
        pass

    # Preview
    st.subheader("Preview")
    st.dataframe(df.head())

    # KPIs
    total = float(vals.sum())
    avg = float(vals.mean())
    maxv = float(vals.max())
    c1, c2, c3 = st.columns(3)
    c1.metric("Total", f"{total:,.2f}")
    c2.metric("Average", f"{avg:,.2f}")
    c3.metric("Max", f"{maxv:,.2f}")

    # Trend chart (group by period column)
    try:
        trend = df.groupby(period_col)[value_col].apply(lambda s: coerce_numeric(s).sum())
        # If date-like, sort chronologically
        try:
            trend.index = pd.to_datetime(trend.index)
            trend = trend.sort_index()
        except Exception:
            pass
        st.subheader("Trend")
        st.line_chart(trend)
    except Exception as e:
        trend = None
        st.warning(f"Could not plot trend: {e}")

    # ---------- Pro: Board-Pack PDF ----------
    class BoardPDF(FPDF):
        def header(self):
            # Leave header empty for a clean look
            pass

        def footer(self):
            self.set_y(-15)
            self.set_font("Arial", size=8)
            self.cell(0, 10, f"Page {self.page_no()}", 0, 0, "C")

    def save_trend_image(series: pd.Series) -> str | None:
        if series is None or series.empty:
            return None
        fig, ax = plt.subplots()
        ax.plot(series.index, series.values)
        ax.set_title("Trend")
        ax.set_xlabel(str(series.index.name) if series.index.name else "Period")
        ax.set_ylabel("Amount")
        fig.tight_layout()
        tmp_img = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        fig.savefig(tmp_img.name, dpi=150)
        plt.close(fig)
        return tmp_img.name

    def build_board_pack(df: pd.DataFrame, period_col: str, value_col: str,
                         total: float, avg: float, maxv: float,
                         trend_series: pd.Series | None) -> str:
        pdf = BoardPDF()
        pdf.set_auto_page_break(auto=True, margin=15)

        # COVER
        pdf.add_page()
        pdf.set_font("Arial", "B", 22)
        pdf.cell(0, 15, "CFO Executive Board Pack", ln=1, align="C")
        pdf.set_font("Arial", "", 12)
        pdf.ln(5)
        pdf.multi_cell(0, 8, "Generated by CFO Agent Dashboard")

        # EXEC SUMMARY
        pdf.add_page()
        pdf.set_font("Arial", "B", 16); pdf.cell(0, 10, "Executive Summary", ln=1)
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 8,
            f"â€¢ Total: {total:,.2f}\n"
            f"â€¢ Average: {avg:,.2f}\n"
            f"â€¢ Max: {maxv:,.2f}\n"
        )

        # VARIANCE (Month-over-Month)
        try:
            df2 = df[[period_col, value_col]].copy()
            df2[value_col] = coerce_numeric(df2[value_col])
            df2 = df2.dropna(subset=[value_col])
            df2 = df2.sort_values(by=period_col)
            df2["MoM Î”"] = df2[value_col].diff()
            top_ups = df2.nlargest(3, "MoM Î”")[[period_col, "MoM Î”"]].dropna()
            top_downs = df2.nsmallest(3, "MoM Î”")[[period_col, "MoM Î”"]].dropna()

            pdf.ln(2)
            pdf.set_font("Arial", "B", 14); pdf.cell(0, 10, "Variance Highlights (MoM)", ln=1)
            pdf.set_font("Arial", "", 12)
            if not top_ups.empty:
                pdf.cell(0, 8, "Largest increases:", ln=1)
                for _, r in top_ups.iterrows():
                    pdf.cell(0, 8, f"  â€¢ {r[period_col]}: +{float(r['MoM Î”']):,.2f}", ln=1)
            if not top_downs.empty:
                pdf.cell(0, 8, "Largest decreases:", ln=1)
                for _, r in top_downs.iterrows():
                    pdf.cell(0, 8, f"  â€¢ {r[period_col]}: {float(r['MoM Î”']):,.2f}", ln=1)
        except Exception:
            pdf.cell(0, 8, "Variance section unavailable for this dataset.", ln=1)

        # TREND IMAGE
        img_path = save_trend_image(trend_series) if trend_series is not None else None
        if img_path and os.path.exists(img_path):
            pdf.add_page()
            pdf.set_font("Arial", "B", 14); pdf.cell(0, 10, "Trend", ln=1)
            pdf.image(img_path, w=180)
            try:
                os.remove(img_path)
            except Exception:
                pass

        # APPENDIX (first 20 rows)
        pdf.add_page()
        pdf.set_font("Arial", "B", 14); pdf.cell(0, 10, "Appendix: Sample Data (first 20 rows)", ln=1)
        pdf.set_font("Arial", "", 10)
        sample = df.head(20).copy()
        # Render as simple text table
        for i, row in sample.iterrows():
            line = " | ".join(str(x) for x in row.tolist())
            pdf.multi_cell(0, 6, line)

        # Output
        out_path = "board_pack.pdf"
        pdf.output(out_path)
        return out_path

    st.divider()
    if st.button("ðŸ“˜ Create Board-Pack PDF (Pro)"):
        try:
            pdf_path = build_board_pack(df, period_col, value_col, total, avg, maxv, trend)
            with open(pdf_path, "rb") as f:
                st.download_button("Download Board-Pack PDF", f, file_name="board_pack.pdf")
        except Exception as e:
            st.error(f"Could not create PDF: {e}")

else:
    st.info("Upload a CSV or Excel file to continue.")
